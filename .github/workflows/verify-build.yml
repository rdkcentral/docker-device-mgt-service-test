name: Verify building of test containers

on:
  pull_request:
    branches: [ "develop" ]

env:
    REGISTRY_ROOT: ghcr.io
    

jobs:
  build-only:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout docker config repository
        uses: actions/checkout@v4
        with:
          path: 'device-management-service'

      - name: Checkout dependent rdkcentral/rdk_logger repository
        uses: actions/checkout@v4
        with:
          repository: 'rdkcentral/rdk_logger'
          ref: 'IMPORT_INITIAL_develop'
          path: 'device-management-service/native-platform/rdk_logger'
          token: ${{ secrets.GH_RO_TKN }}

      - name: Check out the dependent rdkcentral/webconfigframework repository
        uses: actions/checkout@v4
        with:
          repository: 'rdkcentral/WebconfigFramework'
          ref: 'IMPORT_INITIAL_develop'
          path: 'device-management-service/native-platform/WebconfigFramework'
          token: ${{ secrets.GH_RO_TKN }}

      - name: Check out the dependent rdkcentral/libSyscallWrapper repository
        uses: actions/checkout@v4
        with:
          repository: 'rdkcentral/libSyscallWrapper'
          ref: 'IMPORT_INITIAL_develop'
          path: 'device-management-service/native-platform/libSyscallWrapper'
          token: ${{ secrets.GH_RO_TKN }}

      - name: Check out the dependent rdkcentral/common_utilities repository
        uses: actions/checkout@v4
        with:
            repository: 'rdkcentral/common_utilities'
            ref: 'IMPORT_INITIAL_develop'
            path: 'device-management-service/native-platform/common_utilities'
            token: ${{ secrets.GH_RO_TKN }}
      
      - name: Clone tr69hostif dependencies
        run: |
          mkdir -p tr69hostif_dependency_pkg
          cd tr69hostif_dependency_pkg
          
          # Clone repositories
          git clone git@github.com:rdk-e/iarmbus.git
          git clone git@github.com:rdk-e/tr69hostif.git
          git clone https://github.com/rurban/safeclib.git
          git clone -b 24Q4_sprint ssh://gerrit.teamccp.com:29418/rdk/components/generic/rfc/generic
          git clone -b stable2 ssh://gerrit.teamccp.com:29418/rdk/components/cpc/ssa-cpc
          git clone git@github.com:rdkcentral/rdk-halif-device_settings.git
          git clone -b master https://code.rdkcentral.com/r/rdk/components/generic/devicesettings

      - name: Apply patch to devicesettings repository
        run: |
          cd tr69hostif_dependency_pkg/devicesettings
          cp ../../devicesettings_compilation.patch ./
          git apply devicesettings_compilation.patch

      - name: Build mock xconf image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: device-management-service/mock-xconf
          push: true
          tags: localhost:5000/mockxconf:latest
          load: false

      - name: Dump self-signed public serts from mock-xconf container
        run: |
          docker run --rm localhost:5000/mockxconf:latest cat /etc/xconf/certs/mock-xconf-server-cert.pem >  device-management-service/native-platform/mock-xconf-server-cert.pem

      - name: Build native-platform image
        uses: docker/build-push-action@v4
        with:
          context: device-management-service/native-platform
          platforms: linux/amd64
          build-args: |
            - REVISION=${{ github.ref_name }}
          push: false
          tags: native-platform:latest
          load: false

      - name: Prepare expected directory for mount in docker-compose
        run: |
          mkdir -p /tmp/L2_CONTAINER_SHARED_VOLUME

        
